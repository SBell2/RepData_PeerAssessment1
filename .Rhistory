prcomp(scale(mat))
svd1$v[,1]
svd1$d
head(constantMatrix)
svd2$d
svd2[,1:2]
svd2[,2]
svd2$v
svd2$v[,1:2]
svd2$d
dim(faceData)
a1<-(svd1$u[,1])%*%(svd1$d[1])
a1<-(svd1$u[,1])
a1<-(svd$u[,1]*svd$d[1])%*% t(svd1$v[,1])
a1<-(svd1$u[,1]*svd$d[1])%*% t(svd1$v[,1])
a1<-(svd1$u[,1]*svd1$d[1])%*% t(svd1$v[,1])
image(a1)
myImage(a1)
a2<-svd1$u%*%svd1$d[1:2]
a2<-svd1$u%*%diag(svd1$d[1:2])
a2<svd1$u
a2<-svd1$u
a2<-svd1$u[,1:2]%*% diag(svd1$d[1:2])%*%t(svd1$v[,1:2])
myImgage(a2)
myImage(a2)
a5<-svd1$u[,1:5]%*% diag(svd1$d[1:5])%*%t(svd1$v[,1:5])
myImage(vd1$u[,1:5]%*% diag(svd1$d[1:5])%*%t(svd1$v[,1:5]))
myImage(svd1$u[,1:5]%*% diag(svd1$d[1:5])%*%t(svd1$v[,1:5]))
myImage(svd1$u[,1:10]%*% diag(svd1$d[1:10])%*%t(svd1$v[,1:10]))
dim(ssd)
names(ssd[,562:563])
table(ssd$subject)
sum(table(ssd$subject))
table(ssd$activity)
sub1<-subset(ssd, subject=1)
sub1<-subset(ssd, subject==1)
dim(sub1)
names(sub1[, 1:12])
myedit("showXY.R")
showMe(1:6)
mdist<-dist(sub1[,1:3])
hclustering<hclust(mdist)
hclustering<-hclust(mdist)
myplclust(hclustering, lab.col=unclass(sub1$activity))
mdist<-dist(sub1[,10:12])
hclustering<-hclust(mdist)
myplclust(hclustering, lab.col=unlcass(sub$activity))
myplclust(hclustering, lab.col=unclass(sub$activity))
myplclust(hclustering, lab.col = unclass(sub1$activity))
svd1<-svd(scale(sub1[,-c(562, 563)]))
dim(svd1$u)
mxCon<-which.max(svd1$v[,2])
maxCon<-which.max(svd1$v[,2])
mdist<-dist(c(sub1[,10:12], maxCon))
mdist<-dist(sub1[,10:12])
mdist<-dist(sub1[,c(10:12, maxCon)])
hclustering<-hclust(mdist)
myplclust(hclustering, lab.col=unclass(sub1$activity))
names(sub1[maxCon])
KClust<-kmeans(sub1[,-562:563], 6)
KClust<-kmeans(sub1[,-(562:563)], 6)
KClust<-kmeans(sub1[,-c(562:563)], centers=6)
kClust<-kmeans(sub1[,-c(562:563)], centers=6)
table(KClust$cluster, sub1$activity)
table(kClust$cluster, sub1$activity)
kClust<-kmeans(sub1[,-c(562:563)], centers = 6, nstart=100)
table(kCluster$cluster, sub1$activity)
table(kClust$cluster, sub1$activity)
dim(Kclust)
dim(kClust)
dim(kClust$centers)
laying<-which(kClust$size==29)
plot(kClust$centers[laying, 1:12], pch=19, ylab="Laying Cluster")
names(sub1[,1:3])
walkdown<-which(kClust$size==49)
plot(kClust$centers[walkdown, 1:12], pch=19, ylab="Walkdown Cluster")
setwd("/Users/techteam/Documents/Data_Science/RepData_PeerAssessment1")
library(ggplt2)
library(ggplot2)
library(dplyr)
library(tidyr)
unzip("activity.zip")
library(ggplot2)
library(dplyr)
library(tidyr)
unzip("activity.zip")
activity<-read.csv("/activity.csv")
library(ggplot2)
library(dplyr)
library(tidyr)
unzip("activity.zip")
activity<-read.csv("activity.csv")
head(activity)
View(activity)
#Code will make a histogram of the number of steps per day with the base plotting system
hist(activity$steps)
#Code will make a histogram of the number of steps per day with the base plotting system
hist(activity$steps, xlab="steps")
#Code will make a histogram of the number of steps per day with the base plotting system
hist(activity$steps, xlab="Steps")
#Code will make a histogram of the number of steps per day with the base plotting system
hist(activity$steps, xlab="Steps", main="Histogram of Steps")
#Code will make a histogram of the number of steps per day with the base plotting system
hist(activity$steps, xlab="Steps", main="Frequency of Steps")
#load packages that may be useful for analysis
library(ggplot2)
library(dplyr)
library(tidyr)
library(lubridate)
#After forking and cloning the repository, set the working directory to the local copy of the repository. Unzip the file and then read the csv into R
unzip("activity.zip")
activity<-read.csv("activity.csv")
class(activity$steps)
class(activity$date)
head(activity)
#load packages that may be useful for analysis
library(ggplot2)
library(dplyr)
library(tidyr)
library(lubridate)
#After forking and cloning the repository, set the working directory to the local copy of the repository. Unzip the file and then read the csv into R
unzip("activity.zip")
activity<-read.csv("activity.csv")
activity$date<-ymd(activity$date)
class(activity$date)
#Code will make a histogram of the number of steps per day with the base plotting system
activity_by_day<-activity%>%
group_by(date)%>%
summarise(steps=sum(steps))
View(activity_by_day)
class(activity$steps)
#Code will make a histogram of the number of steps per day with the base plotting system
activity_by_day<-activity%>%
group_by(date)%>%
summarise(steps=sum(steps))
hist(activity_by_day$steps)
hist(activity_by_day$steps, xlab="Number of steps", main="Histogram of daily steps")
hist(activity_by_day$steps, xlab="Number of steps", main="Histogram of Daily Steps")
#Code will make a histogram of the number of steps per day with the base plotting system
activity_by_day<-activity%>%
group_by(date)%>%
summarise(steps=sum(steps))
hist(activity_by_day$steps, xlab="Number of steps", main="Histogram of Daily Steps")
mean_and_median_steps<-activity%>%
group_by(date)%>%
summarise(mean=mean(steps), median=median(steps))
install.packages("xtable")
library(xtable)
xtable(mean_and_median_steps)
#Code will make a histogram of the number of steps per day with the base plotting system
activity_by_day<-activity%>%
group_by(date)%>%
summarise(steps=sum(steps))
hist(activity_by_day$steps, xlab="Number of steps", main="Histogram of Daily Steps")
mean_and_median_steps<-activity%>%
group_by(date)%>%
summarise(mean=mean(steps), median=median(steps))
xtable(mean_and_median_steps)
mean_and_median_steps<-xtable(mean_and_median_steps[1:61, ])
print(mean_and_median_steps, type="html")
#Code will make a histogram of the number of steps per day with the base plotting system
activity_by_day<-activity%>%
group_by(date)%>%
summarise(steps=sum(steps))
hist(activity_by_day$steps, xlab="Number of steps", main="Histogram of Daily Steps")
mean_and_median_steps<-activity%>%
group_by(date)%>%
summarise(mean=mean(steps), median=median(steps))
mean_and_median_steps<-xtable(mean_and_median_steps[1:61, ])
print(mean_and_median_steps, type="html")
mean_and_median_steps<-activity%>%
group_by(as.character(date))%>%
summarise(mean=mean(steps), median=median(steps))
mean_and_median_steps<-xtable(mean_and_median_steps[1:61, ])
print(mean_and_median_steps, type="html")
View(mean_and_median_steps)
mean_and_median_steps<-activity%>%
group_by(as.character(date))%>%
summarise(mean=mean(steps, na.rm=TRUE), median=median(steps, na.rm=TRUE))
mean_and_median_steps<-xtable(mean_and_median_steps[1:61, ])
print(mean_and_median_steps, type="html")
mean_and_median_steps<-xtable(mean_and_median_steps)
mean_and_median_steps<-xtable(mean_and_median_steps, digits=0, display = 4)
View(activity_by_day)
sum(is.na(activity_by_day$steps))
sum(is.na(mean_and_median_steps))
View(mean_and_median_steps)
View(activity_by_day)
View(mean_and_median_steps)
#Code will make a histogram of the number of steps per day with the base plotting system
activity_by_day<-activity%>%
group_by(date)%>%
summarise(steps=sum(steps))
hist(activity_by_day$steps, xlab="Number of steps", main="Histogram of Daily Steps")
#The dates will be converted into a character so they work in the xtable
mean_and_median_steps<-activity%>%
group_by(as.character(date))%>%
summarise(mean=mean(steps, na.rm=TRUE), median=median(steps, na.rm=TRUE))
mean_and_median_steps<-xtable(mean_and_median_steps, digits=0)
print(mean_and_median_steps, type="html", include.rownames = FALSE)
View(activity)
mean_interval<-activity%>%
group_by(interval)%>%
summarise(mean_steps=mean(steps, na.rm=TRUE))
plot(x=mean_interval$interval, y=mean_interval$mean_steps, type="l", xlab="interval", ylab="average steps", main="Average steps by 5-minute interval")
mean_interval[, max(mean_interval$mean_steps)]
max(mean_interval$mean_steps)]
max(mean_interval$mean_steps)
mean_interval[ ,mean_interval=206.1698]
mean_interval[ ,mean_interval==206.1698]
mean_interval[ ,mean_interval=206.1698]
View(mean_interval)
View(mean_interval)
mean_interval<-activity%>%
group_by(interval)%>%
summarise(mean_steps=mean(steps, na.rm=TRUE))
plot(x=mean_interval$interval, y=mean_interval$mean_steps, type="l", xlab="interval", ylab="average steps", main="Average steps by 5-minute interval", vline=835)
mean_interval<-activity%>%
group_by(interval)%>%
summarise(mean_steps=mean(steps, na.rm=TRUE))
plot(x=mean_interval$interval, y=mean_interval$mean_steps, type="l", xlab="interval", ylab="average steps", main="Average steps by 5-minute interval", abline=835)
mean_interval<-activity%>%
group_by(interval)%>%
summarise(mean_steps=mean(steps, na.rm=TRUE))
plot(x=mean_interval$interval, y=mean_interval$mean_steps, type="l", xlab="interval", ylab="average steps", main="Average steps by 5-minute interval", abline(v=835)
mean_interval<-activity%>%
group_by(interval)%>%
summarise(mean_steps=mean(steps, na.rm=TRUE))
plot(x=mean_interval$interval, y=mean_interval$mean_steps, type="l", xlab="interval", ylab="average steps", main="Average steps by 5-minute interval", abline(v=835))
mean_interval<-activity%>%
group_by(interval)%>%
summarise(mean_steps=mean(steps, na.rm=TRUE))
plot(x=mean_interval$interval, y=mean_interval$mean_steps, type="l", xlab="interval", ylab="average steps", main="Average steps by 5-minute interval")
abline(v=835)
na_test<-activity%>%
if(steps=NA){steps=="c"}
if(steps==NA){steps=="c"}
View(activity)
na_test<-activity%>%
if(steps==NA){steps=="c"}
activity[is.na(activity)]
atest<-ctivity[is.na(activity)]
atest<-activity[is.na(activity)]
atest<-activity[is.na(activity$steps)]
atest<-activity[, is.na(activity$steps)]
atest<-activity[is.na(activity$steps),]
View(atest)
View(mean_interval)
activity_update<-activity%>%
fwf
rm(atest)
#Count the number of intervals with missing values
sum(is.na(activity$steps))
View(mean_interval)
activity_update<-activity%>%
merge(activity, mean_interval, by="Interval")
activity_update<-activity%>%
merge(activity, mean_interval, by="interval")
activity_update<-activity%>%
merge(activity, mean_interval, by=interval)
activity_update<-activity%>%
merge(activity, mean_interval, by=activity$interval)
View(activity_by_day)
View(mean_interval)
View(activity)
activity_update<-activity%>%
merge(activity, mean_interval, by = interval)
View(activity)
View(mean_interval)
activity_update<-activity%>%
merge(activity, mean_interval, by.x = interval
by.y=interval)
activity_update<-activity%>%
merge(activity, mean_interval, by.x = interval,
by.y=interval)
activity_update<-merge(activity, mean_interval, by.x = interval,
by.y=interval)
merge(activity, mean_interval, by.x = interval,
by.y=interval)
merge(activity, mean_interval, by.x = interval,by.y=interval)
class(mean_interval)
data_frame(mean_interval)
View(mean_interval)
data_frame(mean_interval)
View(mean_interval)
data.frame(mean_interval)
mean_interval<-data.frame(mean_interval)
merge(activity, mean_interval, by.x = interval,by.y=interval)
mean_interval<-data.frame(mean_interval)
class(mean_interval)
class(activity)
merge(activity, mean_interval, by.x = interval,by.y=interval)
merge(activity, mean_interval$mean_steps, by = interval)
class(mean_interval$interval)
class(mean_interval$steps)
class(mean_interval$mean_steps)
class(activity$steps)
class(activity$date)
class(activity$interval)
merge(activity, mean_interval$mean_steps, by = interval)
merge(activity, mean_interval$mean_steps, by = "interval")
merge(activity, mean_interval$mean_steps, by.x = "interval"
by.y="interval")
merge(activity, mean_interval$mean_steps, by.x = "interval"
,by.y="interval")
merge(activity, mean_interval, by.x = "interval"
,by.y="interval")
activity_update<-merge(activity, mean_interval, by.x = "interval"
,by.y="interval")
View(activity_update)
View(activity_update)
activity_update$steps<-ifelse(steps==NA, activity_update$mean_steps,
activity_update$steps)
activity_update$steps<-ifelse(activity_update$steps==NA, activity_update$mean_steps,
activity_update$steps)
View(activity_update)
mean_interval<-activity%>%
group_by(interval)%>%
summarise(mean_steps=mean(steps, na.rm=TRUE))
plot(x=mean_interval$interval, y=mean_interval$mean_steps, type="l", xlab="interval", ylab="average steps", main="Average steps by 5-minute interval")
abline(v=835)
mean_interval<-data.frame(mean_interval)
activity_update<-merge(activity, mean_interval, by.x = "interval"
,by.y="interval")
View(activity_update)
activity_update$steps<-ifelse(activity_update$steps==NA, activity_update$mean_steps,
activity_update$steps)
View(activity_update)
mean_interval<-activity%>%
group_by(interval)%>%
summarise(mean_steps=mean(steps, na.rm=TRUE))
plot(x=mean_interval$interval, y=mean_interval$mean_steps, type="l", xlab="interval", ylab="average steps", main="Average steps by 5-minute interval")
abline(v=835)
mean_interval<-data.frame(mean_interval)
activity_update<-merge(activity, mean_interval, by.x = "interval"
,by.y="interval")
View(activity_update)
activity_update$steps<-ifelse(is.na(activity_update$steps), activity_update$mean_steps,
activity_update$steps)
View(activity_update)
#load packages that may be useful for analysis
library(ggplot2)
library(dplyr)
library(tidyr)
library(lubridate)
library(xtable)
#After forking and cloning the repository, set the working directory to the local copy of the repository. Unzip the file and then read the csv into R. The date is reformatted.
unzip("activity.zip")
activity<-read.csv("activity.csv")
activity$date<-ymd(activity$date)
#Code will make a histogram of the number of steps per day with the base plotting system and then produce a table of the mean and median steps per day
activity_by_day<-activity%>%
group_by(date)%>%
summarise(steps=sum(steps))
hist(activity_by_day$steps, xlab="Number of steps", main="Histogram of Daily Steps")
#The dates will be converted into a character so they work in the xtable
mean_and_median_steps<-activity%>%
group_by(as.character(date))%>%
summarise(mean=mean(steps, na.rm=TRUE), median=median(steps, na.rm=TRUE))
mean_and_median_steps<-xtable(mean_and_median_steps, digits=0)
print(mean_and_median_steps, type="html", include.rownames = FALSE)
mean_interval<-activity%>%
group_by(interval)%>%
summarise(mean_steps=mean(steps, na.rm=TRUE))
plot(x=mean_interval$interval, y=mean_interval$mean_steps, type="l", xlab="interval", ylab="average steps", main="Average steps by 5-minute interval")
abline(v=835)
#Count the number of intervals with missing values
sum(is.na(activity$steps))
mean_interval<-data.frame(mean_interval)
activity_update<-merge(activity, mean_interval, by.x = "interval"
,by.y="interval")
activity_update$steps<-ifelse(is.na(activity_update$steps), activity_update$mean_steps,
activity_update$steps)
activity_update_day<-activity_update%>%
group_by(date)%>%
summarise(steps=sum(steps))
hist(activity_update_day$steps, main="Updated Histogram of daily")
#Count the number of intervals with missing values
sum(is.na(activity$steps))
mean_interval<-data.frame(mean_interval)
activity_update<-merge(activity, mean_interval, by.x = "interval"
,by.y="interval")
activity_update$steps<-ifelse(is.na(activity_update$steps), activity_update$mean_steps,
activity_update$steps)
activity_update_day<-activity_update%>%
group_by(date)%>%
summarise(steps=sum(steps))
hist(activity_update_day$steps, main="Updated Histogram of daily steps")
#Count the number of intervals with missing values
sum(is.na(activity$steps))
mean_interval<-data.frame(mean_interval)
activity_update<-merge(activity, mean_interval, by.x = "interval"
,by.y="interval")
activity_update$steps<-ifelse(is.na(activity_update$steps), activity_update$mean_steps,
activity_update$steps)
activity_update_day<-activity_update%>%
group_by(date)%>%
summarise(steps=sum(steps))
hist(activity_update_day$steps, main="Updated Histogram of daily steps")
Updated_mean_and_median_steps<-activity_update%>%
group_by(as.character(date))%>%
summarise(mean=mean(steps, na.rm=TRUE), median=median(steps, na.rm=TRUE))
Updated_mean_and_median_steps<-xtable(Updated_mean_and_median_steps, digits=0)
print(Updated_mean_and_median_steps, type="html", include.rownames = FALSE)
#Code will make a histogram of the number of steps per day with the base plotting system and then produce a table of the mean and median steps per day
activity_by_day<-activity%>%
group_by(date)%>%
summarise(steps=sum(steps))
hist(activity_by_day$steps, xlab="Number of steps", main="Histogram of Daily Steps")
#The dates will be converted into a character so they work in the xtable
mean_and_median_steps<-activity%>%
group_by(as.character(date))%>%
summarise(mean=mean(steps, na.rm=TRUE), median=median(steps, na.rm=TRUE))
mean(mean_and_median_steps$mean, na.rm=TRUE)
median(mean_and_median_steps$median, na.rm=TRUE)
mean_and_median_steps<-xtable(mean_and_median_steps, digits=0)
print(mean_and_median_steps, type="html", include.rownames = FALSE)
View(activity)
View(activity_by_day)
View(activity_by_day)
View(activity_update_day)
#Count the number of intervals with missing values
sum(is.na(activity$steps))
mean_interval<-data.frame(mean_interval)
activity_update<-merge(activity, mean_interval, by.x = "interval"
,by.y="interval")
activity_update$steps<-ifelse(is.na(activity_update$steps), activity_update$mean_steps,
activity_update$steps)
activity_update_day<-activity_update%>%
group_by(date)%>%
summarise(steps=sum(steps))
hist(activity_update_day$steps, main="Updated Histogram of daily steps")
#Updated daily mean
mean(activity_update_day$steps)
# Updated daily median
median(activity_update_day$steps)
Updated_mean_and_median_steps<-activity_update%>%
group_by(as.character(date))%>%
summarise(mean=mean(steps, na.rm=TRUE), median=median(steps, na.rm=TRUE))
Updated_mean_and_median_steps<-xtable(Updated_mean_and_median_steps, digits=0)
print(Updated_mean_and_median_steps, type="html", include.rownames = FALSE)
weekdays?
?weekdays
?weekdays
#create a variable that indicates whether it is a weekday or weekend.
activity_update$day.of.week<-weekday(activity_update$date)
#create a variable that indicates whether it is a weekday or weekend.
activity_update$day.of.week<-weekdays(activity_update$date)
View(activity_update)
#create a variable that indicates whether it is a weekday or weekend.
activity_update$day.of.week<-weekdays(activity_update$date)
activity_update$weekend<-ifelse(activity_update$day.of.week
=="Saturday"| activity_update$day.of.week=="Sunday", "weekend", "weekday")
View(activity_update)
View(activity_update)
#create a variable that indicates whether it is a weekday or weekend.
activity_update$day.of.week<-weekdays(activity_update$date)
activity_update$weekend<-ifelse(activity_update$day.of.week
=="Saturday"| activity_update$day.of.week=="Sunday", "weekend", "weekday")
ggplot(activity_update, aes(x=activity_update$date, y=sum(activity$steps)))+geom_line()+
facet_grid(.~weekend)
#create a variable that indicates whether it is a weekday or weekend.
activity_update$day.of.week<-weekdays(activity_update$date)
activity_update$weekend<-ifelse(activity_update$day.of.week
=="Saturday"| activity_update$day.of.week=="Sunday", "weekend", "weekday")
daily_updated<-activity_update%>%
group_by(date, weekend)%>%
summarise(steps=sum(steps))%>%
ggplot(aes(x=date,y=steps))+geom_line()+facet_grid(.~weekend)
#create a variable that indicates whether it is a weekday or weekend.
activity_update$day.of.week<-weekdays(activity_update$date)
activity_update$weekend<-ifelse(activity_update$day.of.week
=="Saturday"| activity_update$day.of.week=="Sunday", "weekend", "weekday")
daily_updated<-activity_update%>%
group_by(date, weekend)%>%
summarise(steps=sum(steps))%>%
ggplot(aes(x=date,y=steps))+geom_line()+facet_grid(.~weekend)
daily_updated
#create a variable that indicates whether it is a weekday or weekend.
activity_update$day.of.week<-weekdays(activity_update$date)
activity_update$weekend<-ifelse(activity_update$day.of.week
=="Saturday"| activity_update$day.of.week=="Sunday", "weekend", "weekday")
daily_updated<-activity_update%>%
group_by(interval, weekend)%>%
summarise(steps=mean(steps))%>%
ggplot(aes(x=interval,y=steps))+geom_line()+facet_grid(.~weekend)
daily_updated
install.packages("knitr")
install.packages("knitr")
library(knitr)
knit2html(PA1_template.Rmd)
knit2html("PA1_template.Rmd")
hist(activity_by_day$steps, xlab="Number of steps", main="Histogram of Daily Steps")
hist(activity_by_day$steps, xlab="Number of steps", main="Histogram of Daily Steps")
dev.copy(png, "/figures/Plot1.png")
getwd()
#load packages that may be useful for analysis
library(ggplot2)
library(dplyr)
library(tidyr)
library(lubridate)
library(xtable)
#After forking and cloning the repository, set the working directory to the local copy of the repository. Unzip the file and then read the csv into R. The date is reformatted.
unzip("activity.zip")
activity<-read.csv("activity.csv")
activity$date<-ymd(activity$date)
activity_by_day<-activity%>%
group_by(date)%>%
summarise(steps=sum(steps))
mean(activity_by_day$steps, na.rm=TRUE)
median(activity_by_day$steps, na.rm=TRUE)
hist(activity_by_day$steps, xlab="Number of steps", main="Histogram of Daily Steps")
